name: Frontend Continuous Deployment

on:
  push:
    branches:    
      - main
  workflow_dispatch:

env: 
  NODE_VERSION: 18
  WORK_DIR: starter/frontend
  REPO: 330073786310.dkr.ecr.us-east-1.amazonaws.com/frontend
  REACT_APP_MOVIE_API_URL: project4.io

jobs:
  lint:
    runs-on: ubuntu-latest
    steps: 
      # Checkout code
    - name: Checkout
      uses: actions/checkout@v3

      # Setup NodeJS
      # Perform a cache action to restore cache before dependency install
    - name: Setup NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION}}
        cache: 'npm'
        cache-dependency-path: "${{ env.WORK_DIR }}/package.json"

      # Install dependencies
    - name: Install dependencies
      run: cd ${{ env.WORK_DIR }} && npm ci

      # Lint
    - name: Lint
      run: cd ${{ env.WORK_DIR }} && npm run lint
  
  test:
    runs-on: ubuntu-latest
    steps: 

      # Checkout code
    - name: Checkout
      uses: actions/checkout@v4

      # Setup NodeJS
      # Perform a cache action to restore cache before dependency install
    - name: Setup NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION}}
        cache: 'npm'
        cache-dependency-path: "${{ env.WORK_DIR }}/package.json"

      # Install dependencies
    - name: Install dependencies
      run: cd ${{ env.WORK_DIR }} && npm ci

      # Test
    - name: Test
      run: 
        cd ${{ env.WORK_DIR }} && npm run test

  build:
    runs-on: ubuntu-latest
    needs:
    - lint
    - test
    steps: 

      # Checkout code
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker build
      uses: docker/build-push-action@v4
      with:
        push: true
        context: ${{ env.WORK_DIR }}
        tags: ${{env.REPO}}:${{github.sha}}
        build-args: REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}}
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      
    - uses: imranismail/setup-kustomize@v2
    - name: Deploy
      run: |
        cd "${{ env.WORK_DIR }}/k8s"
        aws eks update-kubeconfig --name cluster
        kustomize edit set image frontend=${{env.REPO}}:${{github.sha}}
        kustomize build | kubectl apply -f -